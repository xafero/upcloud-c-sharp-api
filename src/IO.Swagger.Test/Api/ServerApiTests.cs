/* 
 * Upcloud api
 *
 * Upcloud api specification
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ServerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ServerApiTests
    {
        private ServerApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ServerApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ServerApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ServerApi
            //Assert.IsInstanceOfType(typeof(ServerApi), instance, "instance is a ServerApi");
        }

        
        /// <summary>
        /// Test ServerGet
        /// </summary>
        [Test]
        public void ServerGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ServerGet();
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test ServerPost
        /// </summary>
        [Test]
        public void ServerPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Server server = null;
            //var response = instance.ServerPost(server);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test ServerServerIdDelete
        /// </summary>
        [Test]
        public void ServerServerIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? serverId = null;
            //instance.ServerServerIdDelete(serverId);
            
        }
        
        /// <summary>
        /// Test ServerServerIdGet
        /// </summary>
        [Test]
        public void ServerServerIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? serverId = null;
            //var response = instance.ServerServerIdGet(serverId);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test ServerServerIdPut
        /// </summary>
        [Test]
        public void ServerServerIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? serverId = null;
            //Server server = null;
            //var response = instance.ServerServerIdPut(serverId, server);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
    }

}
